// SPDX-License-Identifier: MIT 
pragma solidity ^0.8.21;

import {Test, console} from "forge-std/Test.sol";
import {ERC721} from "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import {Multicall} from "@openzeppelin/contracts/utils/Multicall.sol";
import {ERC2771Context} from "@openzeppelin/contracts/metatx/ERC2771Context.sol";
import {Context} from "@openzeppelin/contracts/utils/Context.sol";

contract ERC721Vulnerability is Multicall, ERC2771Context, ERC721 {
    constructor(address trustedForwarder) ERC2771Context(trustedForwarder) ERC721("ERC721Vulnerability", "ERC721Vulnerability") {}

    function mint(address to, uint256 tokenId) public {
        _mint(to, tokenId);
    }

    function _msgSender() internal view virtual override(Context, ERC2771Context) returns (address sender) {
        console.log("_msgSender(): %s", ERC2771Context._msgSender());
        return ERC2771Context._msgSender();
    }

    function _msgData() internal view override(Context, ERC2771Context) returns (bytes calldata) {
        return ERC2771Context._msgData();
    }

    // function _authorizeUpgrade(address) internal override onlyOwner {}

    // function _contextSuffixLength() internal view override(ContextUpgradeable, ERC2771ContextUpgradeable) returns (uint256) {
    //     return ERC2771ContextUpgradeable._contextSuffixLength();
    // }
}